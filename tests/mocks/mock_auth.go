// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/auth/auth.go
//
// Generated by this command:
//
//	mockgen -source=./internal/auth/auth.go -destination=tests/mocks/mock_auth.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/JMURv/avito-spring/internal/auth"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCore is a mock of Core interface.
type MockCore struct {
	ctrl     *gomock.Controller
	recorder *MockCoreMockRecorder
	isgomock struct{}
}

// MockCoreMockRecorder is the mock recorder for MockCore.
type MockCoreMockRecorder struct {
	mock *MockCore
}

// NewMockCore creates a new mock instance.
func NewMockCore(ctrl *gomock.Controller) *MockCore {
	mock := &MockCore{ctrl: ctrl}
	mock.recorder = &MockCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCore) EXPECT() *MockCoreMockRecorder {
	return m.recorder
}

// ComparePasswords mocks base method.
func (m *MockCore) ComparePasswords(hashed, pswd []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", hashed, pswd)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePasswords indicates an expected call of ComparePasswords.
func (mr *MockCoreMockRecorder) ComparePasswords(hashed, pswd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*MockCore)(nil).ComparePasswords), hashed, pswd)
}

// Hash mocks base method.
func (m *MockCore) Hash(val string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", val)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockCoreMockRecorder) Hash(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockCore)(nil).Hash), val)
}

// NewToken mocks base method.
func (m *MockCore) NewToken(uid uuid.UUID, role string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", uid, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockCoreMockRecorder) NewToken(uid, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockCore)(nil).NewToken), uid, role)
}

// ParseClaims mocks base method.
func (m *MockCore) ParseClaims(ctx context.Context, tokenStr string) (auth.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseClaims", ctx, tokenStr)
	ret0, _ := ret[0].(auth.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseClaims indicates an expected call of ParseClaims.
func (mr *MockCoreMockRecorder) ParseClaims(ctx, tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseClaims", reflect.TypeOf((*MockCore)(nil).ParseClaims), ctx, tokenStr)
}
