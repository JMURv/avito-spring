// Code generated by ogen, DO NOT EDIT.

package dto

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'd': // Prefix: "dummyLogin"

				if l := len("dummyLogin"); len(elem) >= l && elem[0:l] == "dummyLogin" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleDummyLoginPostRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

			case 'l': // Prefix: "login"

				if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleLoginPostRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

			case 'p': // Prefix: "p"

				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'r': // Prefix: "roducts"

					if l := len("roducts"); len(elem) >= l && elem[0:l] == "roducts" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleProductsPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'v': // Prefix: "vz"

					if l := len("vz"); len(elem) >= l && elem[0:l] == "vz" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handlePvzGetRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handlePvzPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "pvzId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "close_last_reception"

								if l := len("close_last_reception"); len(elem) >= l && elem[0:l] == "close_last_reception" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handlePvzPvzIdCloseLastReceptionPostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'd': // Prefix: "delete_last_product"

								if l := len("delete_last_product"); len(elem) >= l && elem[0:l] == "delete_last_product" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handlePvzPvzIdDeleteLastProductPostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						}

					}

				}

			case 'r': // Prefix: "re"

				if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ceptions"

					if l := len("ceptions"); len(elem) >= l && elem[0:l] == "ceptions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleReceptionsPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'g': // Prefix: "gister"

					if l := len("gister"); len(elem) >= l && elem[0:l] == "gister" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleRegisterPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'd': // Prefix: "dummyLogin"

				if l := len("dummyLogin"); len(elem) >= l && elem[0:l] == "dummyLogin" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = DummyLoginPostOperation
						r.summary = "Получение тестового токена"
						r.operationID = ""
						r.pathPattern = "/dummyLogin"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'l': // Prefix: "login"

				if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = LoginPostOperation
						r.summary = "Авторизация пользователя"
						r.operationID = ""
						r.pathPattern = "/login"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'p': // Prefix: "p"

				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'r': // Prefix: "roducts"

					if l := len("roducts"); len(elem) >= l && elem[0:l] == "roducts" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = ProductsPostOperation
							r.summary = "Добавление товара в текущую приемку (только для сотрудников ПВЗ)"
							r.operationID = ""
							r.pathPattern = "/products"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'v': // Prefix: "vz"

					if l := len("vz"); len(elem) >= l && elem[0:l] == "vz" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = PvzGetOperation
							r.summary = "Получение списка ПВЗ с фильтрацией по дате приемки и пагинацией"
							r.operationID = ""
							r.pathPattern = "/pvz"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = PvzPostOperation
							r.summary = "Создание ПВЗ (только для модераторов)"
							r.operationID = ""
							r.pathPattern = "/pvz"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "pvzId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "close_last_reception"

								if l := len("close_last_reception"); len(elem) >= l && elem[0:l] == "close_last_reception" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = PvzPvzIdCloseLastReceptionPostOperation
										r.summary = "Закрытие последней открытой приемки товаров в рамках ПВЗ"
										r.operationID = ""
										r.pathPattern = "/pvz/{pvzId}/close_last_reception"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							case 'd': // Prefix: "delete_last_product"

								if l := len("delete_last_product"); len(elem) >= l && elem[0:l] == "delete_last_product" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = PvzPvzIdDeleteLastProductPostOperation
										r.summary = "Удаление последнего добавленного товара из текущей приемки (LIFO, только для сотрудников ПВЗ)"
										r.operationID = ""
										r.pathPattern = "/pvz/{pvzId}/delete_last_product"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							}

						}

					}

				}

			case 'r': // Prefix: "re"

				if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ceptions"

					if l := len("ceptions"); len(elem) >= l && elem[0:l] == "ceptions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = ReceptionsPostOperation
							r.summary = "Создание новой приемки товаров (только для сотрудников ПВЗ)"
							r.operationID = ""
							r.pathPattern = "/receptions"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'g': // Prefix: "gister"

					if l := len("gister"); len(elem) >= l && elem[0:l] == "gister" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = RegisterPostOperation
							r.summary = "Регистрация пользователя"
							r.operationID = ""
							r.pathPattern = "/register"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			}

		}
	}
	return r, false
}
