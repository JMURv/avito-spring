// Code generated by ogen, DO NOT EDIT.

package dto

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

type DummyLoginPostReq struct {
	Role DummyLoginPostReqRole `json:"role"`
}

// GetRole returns the value of Role.
func (s *DummyLoginPostReq) GetRole() DummyLoginPostReqRole {
	return s.Role
}

// SetRole sets the value of Role.
func (s *DummyLoginPostReq) SetRole(val DummyLoginPostReqRole) {
	s.Role = val
}

type DummyLoginPostReqRole string

const (
	DummyLoginPostReqRoleEmployee  DummyLoginPostReqRole = "employee"
	DummyLoginPostReqRoleModerator DummyLoginPostReqRole = "moderator"
)

// AllValues returns all DummyLoginPostReqRole values.
func (DummyLoginPostReqRole) AllValues() []DummyLoginPostReqRole {
	return []DummyLoginPostReqRole{
		DummyLoginPostReqRoleEmployee,
		DummyLoginPostReqRoleModerator,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DummyLoginPostReqRole) MarshalText() ([]byte, error) {
	switch s {
	case DummyLoginPostReqRoleEmployee:
		return []byte(s), nil
	case DummyLoginPostReqRoleModerator:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DummyLoginPostReqRole) UnmarshalText(data []byte) error {
	switch DummyLoginPostReqRole(data) {
	case DummyLoginPostReqRoleEmployee:
		*s = DummyLoginPostReqRoleEmployee
		return nil
	case DummyLoginPostReqRoleModerator:
		*s = DummyLoginPostReqRoleModerator
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Error
type Error struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

func (*Error) dummyLoginPostRes() {}
func (*Error) loginPostRes()      {}
func (*Error) registerPostRes()   {}

type LoginPostReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *LoginPostReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *LoginPostReq) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *LoginPostReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *LoginPostReq) SetPassword(val string) {
	s.Password = val
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPVZ returns new OptPVZ with value set to v.
func NewOptPVZ(v PVZ) OptPVZ {
	return OptPVZ{
		Value: v,
		Set:   true,
	}
}

// OptPVZ is optional PVZ.
type OptPVZ struct {
	Value PVZ
	Set   bool
}

// IsSet returns true if OptPVZ was set.
func (o OptPVZ) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPVZ) Reset() {
	var v PVZ
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPVZ) SetTo(v PVZ) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPVZ) Get() (v PVZ, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPVZ) Or(d PVZ) PVZ {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReception returns new OptReception with value set to v.
func NewOptReception(v Reception) OptReception {
	return OptReception{
		Value: v,
		Set:   true,
	}
}

// OptReception is optional Reception.
type OptReception struct {
	Value Reception
	Set   bool
}

// IsSet returns true if OptReception was set.
func (o OptReception) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReception) Reset() {
	var v Reception
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReception) SetTo(v Reception) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReception) Get() (v Reception, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReception) Or(d Reception) Reception {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PVZ
type PVZ struct {
	ID               OptUUID     `json:"id"`
	RegistrationDate OptDateTime `json:"registrationDate"`
	City             PVZCity     `json:"city"`
}

// GetID returns the value of ID.
func (s *PVZ) GetID() OptUUID {
	return s.ID
}

// GetRegistrationDate returns the value of RegistrationDate.
func (s *PVZ) GetRegistrationDate() OptDateTime {
	return s.RegistrationDate
}

// GetCity returns the value of City.
func (s *PVZ) GetCity() PVZCity {
	return s.City
}

// SetID sets the value of ID.
func (s *PVZ) SetID(val OptUUID) {
	s.ID = val
}

// SetRegistrationDate sets the value of RegistrationDate.
func (s *PVZ) SetRegistrationDate(val OptDateTime) {
	s.RegistrationDate = val
}

// SetCity sets the value of City.
func (s *PVZ) SetCity(val PVZCity) {
	s.City = val
}

func (*PVZ) pvzPostRes() {}

type PVZCity string

const (
	PVZCity_0 PVZCity = "Москва"
	PVZCity_1 PVZCity = "Санкт-Петербург"
	PVZCity_2 PVZCity = "Казань"
)

// AllValues returns all PVZCity values.
func (PVZCity) AllValues() []PVZCity {
	return []PVZCity{
		PVZCity_0,
		PVZCity_1,
		PVZCity_2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PVZCity) MarshalText() ([]byte, error) {
	switch s {
	case PVZCity_0:
		return []byte(s), nil
	case PVZCity_1:
		return []byte(s), nil
	case PVZCity_2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PVZCity) UnmarshalText(data []byte) error {
	switch PVZCity(data) {
	case PVZCity_0:
		*s = PVZCity_0
		return nil
	case PVZCity_1:
		*s = PVZCity_1
		return nil
	case PVZCity_2:
		*s = PVZCity_2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Product
type Product struct {
	ID          OptUUID     `json:"id"`
	DateTime    OptDateTime `json:"dateTime"`
	Type        ProductType `json:"type"`
	ReceptionId uuid.UUID   `json:"receptionId"`
}

// GetID returns the value of ID.
func (s *Product) GetID() OptUUID {
	return s.ID
}

// GetDateTime returns the value of DateTime.
func (s *Product) GetDateTime() OptDateTime {
	return s.DateTime
}

// GetType returns the value of Type.
func (s *Product) GetType() ProductType {
	return s.Type
}

// GetReceptionId returns the value of ReceptionId.
func (s *Product) GetReceptionId() uuid.UUID {
	return s.ReceptionId
}

// SetID sets the value of ID.
func (s *Product) SetID(val OptUUID) {
	s.ID = val
}

// SetDateTime sets the value of DateTime.
func (s *Product) SetDateTime(val OptDateTime) {
	s.DateTime = val
}

// SetType sets the value of Type.
func (s *Product) SetType(val ProductType) {
	s.Type = val
}

// SetReceptionId sets the value of ReceptionId.
func (s *Product) SetReceptionId(val uuid.UUID) {
	s.ReceptionId = val
}

func (*Product) productsPostRes() {}

type ProductType string

const (
	ProductType_0 ProductType = "электроника"
	ProductType_1 ProductType = "одежда"
	ProductType_2 ProductType = "обувь"
)

// AllValues returns all ProductType values.
func (ProductType) AllValues() []ProductType {
	return []ProductType{
		ProductType_0,
		ProductType_1,
		ProductType_2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProductType) MarshalText() ([]byte, error) {
	switch s {
	case ProductType_0:
		return []byte(s), nil
	case ProductType_1:
		return []byte(s), nil
	case ProductType_2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProductType) UnmarshalText(data []byte) error {
	switch ProductType(data) {
	case ProductType_0:
		*s = ProductType_0
		return nil
	case ProductType_1:
		*s = ProductType_1
		return nil
	case ProductType_2:
		*s = ProductType_2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProductsPostBadRequest Error

func (*ProductsPostBadRequest) productsPostRes() {}

type ProductsPostForbidden Error

func (*ProductsPostForbidden) productsPostRes() {}

type ProductsPostReq struct {
	Type  ProductsPostReqType `json:"type"`
	PvzId uuid.UUID           `json:"pvzId"`
}

// GetType returns the value of Type.
func (s *ProductsPostReq) GetType() ProductsPostReqType {
	return s.Type
}

// GetPvzId returns the value of PvzId.
func (s *ProductsPostReq) GetPvzId() uuid.UUID {
	return s.PvzId
}

// SetType sets the value of Type.
func (s *ProductsPostReq) SetType(val ProductsPostReqType) {
	s.Type = val
}

// SetPvzId sets the value of PvzId.
func (s *ProductsPostReq) SetPvzId(val uuid.UUID) {
	s.PvzId = val
}

type ProductsPostReqType string

const (
	ProductsPostReqType_0 ProductsPostReqType = "электроника"
	ProductsPostReqType_1 ProductsPostReqType = "одежда"
	ProductsPostReqType_2 ProductsPostReqType = "обувь"
)

// AllValues returns all ProductsPostReqType values.
func (ProductsPostReqType) AllValues() []ProductsPostReqType {
	return []ProductsPostReqType{
		ProductsPostReqType_0,
		ProductsPostReqType_1,
		ProductsPostReqType_2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProductsPostReqType) MarshalText() ([]byte, error) {
	switch s {
	case ProductsPostReqType_0:
		return []byte(s), nil
	case ProductsPostReqType_1:
		return []byte(s), nil
	case ProductsPostReqType_2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProductsPostReqType) UnmarshalText(data []byte) error {
	switch ProductsPostReqType(data) {
	case ProductsPostReqType_0:
		*s = ProductsPostReqType_0
		return nil
	case ProductsPostReqType_1:
		*s = ProductsPostReqType_1
		return nil
	case ProductsPostReqType_2:
		*s = ProductsPostReqType_2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PvzGetOKItem struct {
	Pvz        OptPVZ                       `json:"pvz"`
	Receptions []PvzGetOKItemReceptionsItem `json:"receptions"`
}

// GetPvz returns the value of Pvz.
func (s *PvzGetOKItem) GetPvz() OptPVZ {
	return s.Pvz
}

// GetReceptions returns the value of Receptions.
func (s *PvzGetOKItem) GetReceptions() []PvzGetOKItemReceptionsItem {
	return s.Receptions
}

// SetPvz sets the value of Pvz.
func (s *PvzGetOKItem) SetPvz(val OptPVZ) {
	s.Pvz = val
}

// SetReceptions sets the value of Receptions.
func (s *PvzGetOKItem) SetReceptions(val []PvzGetOKItemReceptionsItem) {
	s.Receptions = val
}

type PvzGetOKItemReceptionsItem struct {
	Reception OptReception `json:"reception"`
	Products  []Product    `json:"products"`
}

// GetReception returns the value of Reception.
func (s *PvzGetOKItemReceptionsItem) GetReception() OptReception {
	return s.Reception
}

// GetProducts returns the value of Products.
func (s *PvzGetOKItemReceptionsItem) GetProducts() []Product {
	return s.Products
}

// SetReception sets the value of Reception.
func (s *PvzGetOKItemReceptionsItem) SetReception(val OptReception) {
	s.Reception = val
}

// SetProducts sets the value of Products.
func (s *PvzGetOKItemReceptionsItem) SetProducts(val []Product) {
	s.Products = val
}

type PvzPostBadRequest Error

func (*PvzPostBadRequest) pvzPostRes() {}

type PvzPostForbidden Error

func (*PvzPostForbidden) pvzPostRes() {}

type PvzPvzIdCloseLastReceptionPostBadRequest Error

func (*PvzPvzIdCloseLastReceptionPostBadRequest) pvzPvzIdCloseLastReceptionPostRes() {}

type PvzPvzIdCloseLastReceptionPostForbidden Error

func (*PvzPvzIdCloseLastReceptionPostForbidden) pvzPvzIdCloseLastReceptionPostRes() {}

type PvzPvzIdDeleteLastProductPostBadRequest Error

func (*PvzPvzIdDeleteLastProductPostBadRequest) pvzPvzIdDeleteLastProductPostRes() {}

type PvzPvzIdDeleteLastProductPostForbidden Error

func (*PvzPvzIdDeleteLastProductPostForbidden) pvzPvzIdDeleteLastProductPostRes() {}

// PvzPvzIdDeleteLastProductPostOK is response for PvzPvzIdDeleteLastProductPost operation.
type PvzPvzIdDeleteLastProductPostOK struct{}

func (*PvzPvzIdDeleteLastProductPostOK) pvzPvzIdDeleteLastProductPostRes() {}

// Ref: #/components/schemas/Reception
type Reception struct {
	ID       OptUUID         `json:"id"`
	DateTime time.Time       `json:"dateTime"`
	PvzId    uuid.UUID       `json:"pvzId"`
	Status   ReceptionStatus `json:"status"`
}

// GetID returns the value of ID.
func (s *Reception) GetID() OptUUID {
	return s.ID
}

// GetDateTime returns the value of DateTime.
func (s *Reception) GetDateTime() time.Time {
	return s.DateTime
}

// GetPvzId returns the value of PvzId.
func (s *Reception) GetPvzId() uuid.UUID {
	return s.PvzId
}

// GetStatus returns the value of Status.
func (s *Reception) GetStatus() ReceptionStatus {
	return s.Status
}

// SetID sets the value of ID.
func (s *Reception) SetID(val OptUUID) {
	s.ID = val
}

// SetDateTime sets the value of DateTime.
func (s *Reception) SetDateTime(val time.Time) {
	s.DateTime = val
}

// SetPvzId sets the value of PvzId.
func (s *Reception) SetPvzId(val uuid.UUID) {
	s.PvzId = val
}

// SetStatus sets the value of Status.
func (s *Reception) SetStatus(val ReceptionStatus) {
	s.Status = val
}

func (*Reception) pvzPvzIdCloseLastReceptionPostRes() {}
func (*Reception) receptionsPostRes()                 {}

type ReceptionStatus string

const (
	ReceptionStatusInProgress ReceptionStatus = "in_progress"
	ReceptionStatusClose      ReceptionStatus = "close"
)

// AllValues returns all ReceptionStatus values.
func (ReceptionStatus) AllValues() []ReceptionStatus {
	return []ReceptionStatus{
		ReceptionStatusInProgress,
		ReceptionStatusClose,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReceptionStatus) MarshalText() ([]byte, error) {
	switch s {
	case ReceptionStatusInProgress:
		return []byte(s), nil
	case ReceptionStatusClose:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReceptionStatus) UnmarshalText(data []byte) error {
	switch ReceptionStatus(data) {
	case ReceptionStatusInProgress:
		*s = ReceptionStatusInProgress
		return nil
	case ReceptionStatusClose:
		*s = ReceptionStatusClose
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReceptionsPostBadRequest Error

func (*ReceptionsPostBadRequest) receptionsPostRes() {}

type ReceptionsPostForbidden Error

func (*ReceptionsPostForbidden) receptionsPostRes() {}

type ReceptionsPostReq struct {
	PvzId uuid.UUID `json:"pvzId"`
}

// GetPvzId returns the value of PvzId.
func (s *ReceptionsPostReq) GetPvzId() uuid.UUID {
	return s.PvzId
}

// SetPvzId sets the value of PvzId.
func (s *ReceptionsPostReq) SetPvzId(val uuid.UUID) {
	s.PvzId = val
}

type RegisterPostReq struct {
	Email    string              `json:"email"`
	Password string              `json:"password"`
	Role     RegisterPostReqRole `json:"role"`
}

// GetEmail returns the value of Email.
func (s *RegisterPostReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *RegisterPostReq) GetPassword() string {
	return s.Password
}

// GetRole returns the value of Role.
func (s *RegisterPostReq) GetRole() RegisterPostReqRole {
	return s.Role
}

// SetEmail sets the value of Email.
func (s *RegisterPostReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *RegisterPostReq) SetPassword(val string) {
	s.Password = val
}

// SetRole sets the value of Role.
func (s *RegisterPostReq) SetRole(val RegisterPostReqRole) {
	s.Role = val
}

type RegisterPostReqRole string

const (
	RegisterPostReqRoleEmployee  RegisterPostReqRole = "employee"
	RegisterPostReqRoleModerator RegisterPostReqRole = "moderator"
)

// AllValues returns all RegisterPostReqRole values.
func (RegisterPostReqRole) AllValues() []RegisterPostReqRole {
	return []RegisterPostReqRole{
		RegisterPostReqRoleEmployee,
		RegisterPostReqRoleModerator,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RegisterPostReqRole) MarshalText() ([]byte, error) {
	switch s {
	case RegisterPostReqRoleEmployee:
		return []byte(s), nil
	case RegisterPostReqRoleModerator:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RegisterPostReqRole) UnmarshalText(data []byte) error {
	switch RegisterPostReqRole(data) {
	case RegisterPostReqRoleEmployee:
		*s = RegisterPostReqRoleEmployee
		return nil
	case RegisterPostReqRoleModerator:
		*s = RegisterPostReqRoleModerator
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Token string

func (*Token) dummyLoginPostRes() {}
func (*Token) loginPostRes()      {}

// Ref: #/components/schemas/User
type User struct {
	ID    OptUUID  `json:"id"`
	Email string   `json:"email"`
	Role  UserRole `json:"role"`
}

// GetID returns the value of ID.
func (s *User) GetID() OptUUID {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetRole returns the value of Role.
func (s *User) GetRole() UserRole {
	return s.Role
}

// SetID sets the value of ID.
func (s *User) SetID(val OptUUID) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetRole sets the value of Role.
func (s *User) SetRole(val UserRole) {
	s.Role = val
}

func (*User) registerPostRes() {}

type UserRole string

const (
	UserRoleEmployee  UserRole = "employee"
	UserRoleModerator UserRole = "moderator"
)

// AllValues returns all UserRole values.
func (UserRole) AllValues() []UserRole {
	return []UserRole{
		UserRoleEmployee,
		UserRoleModerator,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserRole) MarshalText() ([]byte, error) {
	switch s {
	case UserRoleEmployee:
		return []byte(s), nil
	case UserRoleModerator:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserRole) UnmarshalText(data []byte) error {
	switch UserRole(data) {
	case UserRoleEmployee:
		*s = UserRoleEmployee
		return nil
	case UserRoleModerator:
		*s = UserRoleModerator
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
