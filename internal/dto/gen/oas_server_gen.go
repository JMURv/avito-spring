// Code generated by ogen, DO NOT EDIT.

package dto

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DummyLoginPost implements POST /dummyLogin operation.
	//
	// Получение тестового токена.
	//
	// POST /dummyLogin
	DummyLoginPost(ctx context.Context, req *DummyLoginPostReq) (DummyLoginPostRes, error)
	// LoginPost implements POST /login operation.
	//
	// Авторизация пользователя.
	//
	// POST /login
	LoginPost(ctx context.Context, req *LoginPostReq) (LoginPostRes, error)
	// ProductsPost implements POST /products operation.
	//
	// Добавление товара в текущую приемку (только для
	// сотрудников ПВЗ).
	//
	// POST /products
	ProductsPost(ctx context.Context, req *ProductsPostReq) (ProductsPostRes, error)
	// PvzGet implements GET /pvz operation.
	//
	// Получение списка ПВЗ с фильтрацией по дате приемки и
	// пагинацией.
	//
	// GET /pvz
	PvzGet(ctx context.Context, params PvzGetParams) ([]PvzGetOKItem, error)
	// PvzPost implements POST /pvz operation.
	//
	// Создание ПВЗ (только для модераторов).
	//
	// POST /pvz
	PvzPost(ctx context.Context, req *PVZ) (PvzPostRes, error)
	// PvzPvzIdCloseLastReceptionPost implements POST /pvz/{pvzId}/close_last_reception operation.
	//
	// Закрытие последней открытой приемки товаров в рамках
	// ПВЗ.
	//
	// POST /pvz/{pvzId}/close_last_reception
	PvzPvzIdCloseLastReceptionPost(ctx context.Context, params PvzPvzIdCloseLastReceptionPostParams) (PvzPvzIdCloseLastReceptionPostRes, error)
	// PvzPvzIdDeleteLastProductPost implements POST /pvz/{pvzId}/delete_last_product operation.
	//
	// Удаление последнего добавленного товара из текущей
	// приемки (LIFO, только для сотрудников ПВЗ).
	//
	// POST /pvz/{pvzId}/delete_last_product
	PvzPvzIdDeleteLastProductPost(ctx context.Context, params PvzPvzIdDeleteLastProductPostParams) (PvzPvzIdDeleteLastProductPostRes, error)
	// ReceptionsPost implements POST /receptions operation.
	//
	// Создание новой приемки товаров (только для
	// сотрудников ПВЗ).
	//
	// POST /receptions
	ReceptionsPost(ctx context.Context, req *ReceptionsPostReq) (ReceptionsPostRes, error)
	// RegisterPost implements POST /register operation.
	//
	// Регистрация пользователя.
	//
	// POST /register
	RegisterPost(ctx context.Context, req *RegisterPostReq) (RegisterPostRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
